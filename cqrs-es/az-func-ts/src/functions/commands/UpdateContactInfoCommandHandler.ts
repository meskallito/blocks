import { CommandHandler } from "./CommandHandler";
import { PartyRepository } from "../repositories/PartyRepository";
import { EventBus } from "../events/EventBus";
import { UpdateContactInfoCommand } from "./UpdateContactInfoCommand";

export class UpdateContactInfoCommandHandler implements CommandHandler<UpdateContactInfoCommand> {
    constructor(
        private readonly partyRepository: PartyRepository,
        private readonly eventBus: EventBus
    ) {}

    async handle(command: UpdateContactInfoCommand): Promise<void> {
        // Fetch the Person aggregate from the repository
        const party = await this.partyRepository.getById(command.partyId);
        if (!party) {
            throw new Error(`Party with ID ${command.partyId} not found.`);
        }

        // Update the contact information on the Person aggregate
        party.updateContactInfo(command.emails, command.phoneNumbers);

        // Save the updated Person aggregate, which involves persisting events
        await this.partyRepository.save(party);

        // Publish the domain events generated by the aggregate
        this.eventBus.publish(party.getUncommittedEvents());
    }
}